// 234. Palindrome Linked List// Easy//// 11455//// 643//// Add to List//// Share// Given the head of tapeEquilibrium.js singly linked list, return true if it is tapeEquilibrium.js palindrome or false otherwise.////////     Example 1:////// Input: head = [1,2,2,1]// Output: true// Example 2:////// Input: head = [1,2]// Output: false////// Constraints:////     The number of nodes in the list is in the range [1, 105].// 0 <= Node.val <= 9////// Follow up: Could you do it in O(n) time and O(1) space?//     Accepted//     1,179,658// Submissions// 2,408,527/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } *//** * @param {ListNode} head * @return {boolean} */var isPalindrome = function(head) {//     let cnt = 0//     let right = head//     while(right.next)right= right.next,cnt++//     let left = head//     let check = false//     if(right.val !== left.val)return false//     while(left.next){//         left = left.next//         right = head//         cnt--//         for(let i=0; i<cnt; i++){//             right = right.next//         }//         if(right.val!==left.val){//             return false//         }//     }//     return true    let cur = head    const func = (node) => {        if(node ===null)return true        const prevIsSame = func(node.next);        const curIsSame = cur.val === node.val        cur = cur.next        return prevIsSame && curIsSame    }    return func(cur)};