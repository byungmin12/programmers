// 70. Climbing Stairs// Easy//// 13472//// 402//// Add to List//// Share// You are climbing tapeEquilibrium.js staircase. It takes n steps to reach the top.////     Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?////////     Example 1://// Input: n = 2// Output: 2// Explanation: There are two ways to climb to the top.// 1. 1 step + 1 step// 2. 2 steps// Example 2://// Input: n = 3// Output: 3// Explanation: There are three ways to climb to the top.// 1. 1 step + 1 step + 1 step// 2. 1 step + 2 steps// 3. 2 steps + 1 step////// Constraints:////     1 <= n <= 45// Accepted// 1.8M// Submissions// 3.4M/** * @param {number} n * @return {number} */var climbStairs = function(n, memo= new Array()) {    //solution 1//     let dp = new Array(n + 1);//     dp[1] = 1, dp[2] = 2;//     for (let i = 3; i <= n; i++) {//         dp[i] = dp[i-1] + dp[i-2];//     }//     return dp[n];    //solution 2//     if(n ===1)return 1//     if(n ===2)return 2//     if(memo[n] !== undefined)return memo[n]//     memo[n] = climbStairs(n-2, memo) + climbStairs(n-1,memo)//     return memo[n]    //solution 3    let two = 0, one = 1;    for (let i = 0; i < n; i++) {        [two, one] = [one, two + one];    }    return one;};