function solution(s, times) {    // 요 두개 배열에 담아 리턴    let isSavingPerDay = 1 // 성공: 1 실패 : 0    // 한달에 30일 1년은 360일    // s시작 날짜는 YYYY:MM:DD:HH:MM:SS 형식    // times는 DD:HH:MM:SS 형식    let startDay = s.split(":").map((t)=>Number(t))    let startDayLength = startDay.length    for(let i =0; i<times.length; i++){        let savingDay = times[i].split(":").map((t)=>Number(t))// [ '2021', '04', '12', '16', '08', '35' ]        // [ '01', '06', '30', '00' ]        // [ '01', '01', '12', '00' ]        // [ '00', '00', '09', '25' ]        let isPass = false        for(let n=savingDay.length-1; n>=0; n--){            //DD:HH:MM:SS            if(n===savingDay.length-1){                //SS                let sumSec = savingDay[n] + startDay[startDayLength -1]                if(sumSec >59){                    startDay[startDayLength -2] = startDay[startDayLength -2] + parseInt(sumSec/60)                    startDay[startDayLength -1] = sumSec % 60                }else{                    startDay[startDayLength -1] = sumSec                }            }else if(n===savingDay.length-2){                //MM                let sumMin = savingDay[n] + startDay[startDayLength -2]                if(sumMin >59){                    startDay[startDayLength -3] = startDay[startDayLength -3] + parseInt(sumMin/60)                    startDay[startDayLength -2] = sumMin % 60                }else{                    startDay[startDayLength -2] = sumMin                }            }else if(n===savingDay.length-3){                //HH                let sumHour = savingDay[n] + startDay[startDayLength -3]                if(sumHour >23){                    startDay[startDayLength -4] = startDay[startDayLength -4] + parseInt(sumHour/24)                    startDay[startDayLength -3] = sumHour % 24                    isPass= true                }else{                    startDay[startDayLength -3] = sumHour                }            }else if(n===savingDay.length-4){                //DD                let sumDay = savingDay[n] + startDay[startDayLength -4]                if(isPass && savingDay[n]>=1){                    isSavingPerDay = 0                }                if(sumDay >30){                    startDay[startDayLength -5] = startDay[startDayLength -5] +  parseInt(sumDay/30)                    startDay[startDayLength -4] = sumDay % 30                }else{                    startDay[startDayLength -4] = sumDay                }            }        }    }    let d1 =startDay.slice(0,3)    let d2 = s.split(":").slice(0,3).map(a=>Number(a))    let result = []    for(let i=0; i<d1.length;i++){        result.push(Math.abs(d1[i]-d2[i]))    }    return [isSavingPerDay,  (result[0]*360)+(result[1]*30)+(result[2]+1) ]}