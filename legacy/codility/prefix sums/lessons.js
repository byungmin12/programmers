function solution(A, B, K) {    // Implement your solution here    let cnt = 0;    let i = A    if(K ===1 )return B-A + 1;    while(i <= B){        if(i % K ===0){            cnt++            i += K        }else{            i++        }    }    return cnt}// you can write to stdout for debugging purposes, e.g.// console.log('this is a debug message');// This is a demo task.// Write a function:// function solution(A);// that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.// For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.// Given A = [1, 2, 3], the function should return 4.// Given A = [−1, −3], the function should return 1.// Write an efficient algorithm for the following assumptions:// N is an integer within the range [1..100,000];// each element of array A is an integer within the range [−1,000,000..1,000,000].function solution2(A) {    // Implement your solution here    const a = new Set(A.filter(value=> value>0))    for(let i=1; i<=a.size; i++){        if(a.has(i))continue;        return i;    }    return a.size+1}function solution3(A) {    // Implement your solution here    let cnt = 0;    let pointer = 0;    for(let i =0; i<A.length; i++){        const value =A[i];        if(cnt >= 1000000000)return -1        if(value === 1)cnt += pointer;        else pointer++    }    return cnt;}