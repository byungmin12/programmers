function solution(arr){    // 연속적인 숫자는 하나로 통일하여 리턴    return arr.reduce((acc,cur)=>{        if(acc[acc.length -1] !== cur)acc.push(cur)        return acc    },[])}//// 테스트 1// 입력값 〉// [1, 1, 3, 3, 0, 1, 1]// 기댓값 〉// [1, 3, 0, 1]// 실행 결과 〉// 테스트를 통과하였습니다.//     테스트 2// 입력값 〉// [4, 4, 4, 3, 3]// 기댓값 〉// [4, 3]// 실행 결과 〉// 테스트를 통과하였습니다.// x_axis, y_axis 선분 그리고 그 교차점에서 제일 넓은 사각형 구하는 문제function solution(n, m, x_axis, y_axis) {    const getGap = (values,max) => {        const gaps = [values[0]];        for (let i = 1; i < values.length; i++) {            gaps.push(values[i] - values[i - 1]);        }        gaps.push(max - values[values.length - 1]);        return gaps;    }    const xGaps = getGap(x_axis, n);    const yGaps = getGap(y_axis, m);    // 가능한 모든 직사각형 면적을 구합니다.    let maxArea = 0;    for (const xGap of xGaps) {        for (const yGap of yGaps) {            const area = xGap * yGap;            maxArea = Math.max(maxArea, area)        }    }    return maxArea}//// 테스트 1// 입력값 〉// 4, 4, [1], [3]// 기댓값 〉// 9// 실행 결과 〉// 테스트를 통과하였습니다.//     테스트 2// 입력값 〉// 3, 4, [2], [1, 2]// 기댓값 〉// 4// 실행 결과 〉// 테스트를 통과하였습니다.function solution(numbers, k) {    let result = Infinity;    const permitate = (numbers,dep,cnt,k) => {        if(cnt >= result)return        if(dep === numbers.length){            let flag = true            for (let i = 1; i < numbers.length; i++) {                //차이 확인하는 부분                if (Math.abs(numbers[i - 1] - numbers[i]) > k) {                    flag = false;                    break;                }            }            if (flag)result = Math.min(result,cnt)        }        for (let i = dep; i < numbers.length; i++) {            [numbers[dep],numbers[i]] = [numbers[i],numbers[dep]]            permitate(numbers, dep + 1, dep !== i ? cnt + 1 : cnt, k);            [numbers[dep],numbers[i]] = [numbers[i],numbers[dep]]        }    }    permitate(numbers,0,0,k)    return result === Infinity ? -1 : result}//// 테스트 1// 입력값 〉// [10, 40, 30, 20], 20// 기댓값 〉// 1// 실행 결과 〉// 테스트를 통과하였습니다.//     테스트 2// 입력값 〉// [3, 7, 2, 8, 6, 4, 5, 1], 3// 기댓값 〉// 2// 실행 결과 〉// 테스트를 통과하였습니다.