/** * @param {number[]} nums * @return {number[][]} */const permute = function(nums) {    let result = []    const backtracking = (arr,temp) => {        if(arr.length ===0){            result.push(temp)        }        for(let i=0; i<arr.length; i++){            backtracking([...arr.slice(0,i),...arr.slice(i+1)],[...temp,arr[i]])        }    }    backtracking(nums,[])    return result};const permute2 = function(letters) {    let res = [];    function dfs( path, used) {        if(path.length === letters.length){            res.push(path)            return        }        for(let i=0; i < letters.length; i++){            if(!used[i]){                path.push(letters[i])                used[i] = true                dfs(path, used)                path.pop()                used[i]= false            }        }    }    dfs([], Array(letters.length).fill(false));    return res;}