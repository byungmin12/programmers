// 438. Find All Anagrams in tapeEquilibrium.js String// Medium//// 8299//// 266//// Add to List//// Share// Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.//// An Anagram is tapeEquilibrium.js word or phrase formed by rearranging the letters of tapeEquilibrium.js different word or phrase, typically using all the original letters exactly once.////////     Example 1://// Input: s = "cbaebabacd", p = "abc"// Output: [0,6]// Explanation://     The substring with start index = 0 is "cba", which is an anagram of "abc".//     The substring with start index = 6 is "bac", which is an anagram of "abc".//     Example 2://// Input: s = "abab", p = "ab"// Output: [0,1,2]// Explanation://     The substring with start index = 0 is "ab", which is an anagram of "ab".//     The substring with start index = 1 is "ba", which is an anagram of "ab".//     The substring with start index = 2 is "ab", which is an anagram of "ab".//////     Constraints://// 1 <= s.length, p.length <= 3 * 104// s and p consist of lowercase English letters.//     Accepted// 581.1K// Submissions// 1.2M/** * @param {string} s * @param {string} p * @return {number[]} */var findAnagrams = function(s, p) {    let result = []    let left = 0;    let right = 0;    let hash = {}    let cnt = p.length    for(let i =0; i<p.length; i++){        hash[p[i]] ? hash[p[i]] += 1 :hash[p[i]] = 1;    }    while(right < s.length){        if(hash[s[right]] >0)cnt --        hash[s[right]]--        right++        if(cnt===0)result.push(left)        if(right - left === p.length){            if(hash[s[left]] >=0 )cnt++            hash[s[left]]++;            left++;        }    }    return result};