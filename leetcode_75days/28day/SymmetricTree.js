// 101. Symmetric Tree// Easy//// 11361//// 259//// Add to List//// Share// Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).//////// Example 1:////// Input: root = [1,2,2,3,4,4,3]// Output: true// Example 2:////// Input: root = [1,2,2,null,3,null,3]// Output: false////// Constraints:////     The number of nodes in the tree is in the range [1, 1000].// -100 <= Node.val <= 100////// Follow up: Could you solve it both recursively and iteratively?/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } *//** * @param {TreeNode} root * @return {boolean} */var isSymmetric = function(root) {    if(!root.left && !root.right )return true    let queue = [[root.left,root.right]]    let pt = 0;    while(queue[pt]){        let left = queue[pt][0]        let right =queue[pt][1]        if(!left || !right ||left.val !== right.val)return false        if(left.right || right.left)queue.push([left.right,right.left])        if(left.left || right.right)queue.push([left.left,right.right])        pt++    }    return true};