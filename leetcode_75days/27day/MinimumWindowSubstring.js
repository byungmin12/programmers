var minWindow = function (s, t) {    // `right` is -1 since every loop, we start by expanding the right boundary    // setting this to -1 ensures that we will check the first char on the first time    let min = "", left = 0, right = -1;    let map = {};    // this creates a map for the characters we need to include in the substring    // we store the character and its count since it can be repeated    // for example: "BAAC"    t.split('').forEach(element => {        map[element] =map[element] ? map[element] + 1 : 1    });    // sets how many different characters we still have    // for example: given the input "BAAC", we still have 3 different characters need to check    let count = Object.keys(map).length;    while (right <= s.length) {        // found a valid substring        if (count == 0) {            // try to shift left boudary to the right, this means the very left character will be removed            // because of this, we need to check whats the affect by removing that character,            let current = s[left];            // if this chacter is in our map, it means we ll need to find another one in the future            if (map[current] != null) map[current]++;            // * we must have the condition `>0` because for case like "BBBA...", count for B could be negative            if (map[current] > 0) count++;            let temp = s.substring(left, right+1)            if (min == "") min = temp;            else min = min.length<temp.length?min:temp;            left++;        } else {            right++;            let current = s[right];            // decrease the count for this character            if (map[current] != null) map[current]--;            if (map[current] == 0) count--;        }    }    return min;}/** * @param {string} s * @param {string} t * @return {string} */var minWindow = function(s, t) {    let m = s.length    let n = t.length;    if(m<n)return ""    let min = s+"a"    let checkObj = {}    new Array(n).fill(0).forEach((_,idx)=>{        checkObj[t[idx]] = checkObj[t[idx]] ? checkObj[t[idx]] +1 : 1    })    for(let i =0; i<m-n +1; i++){        if(checkObj[s[i]] ===undefined)continue        let pointer= i        let cnt = n;        let str= ""        let localCheck = {...checkObj}        while(0< cnt && pointer<m ){            str= str + s[pointer]            if(str.length > min.length){                break            }            if(localCheck[s[pointer]]>0){                cnt--                localCheck[s[pointer]]--            }            if(cnt===0){                if(min.length > str.length){                    min = str                }                break            }            pointer++        }    }    return  min===s+"a" ? "":min};