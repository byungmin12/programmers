// 152. Maximum Product Subarray// Medium//// 13941//// 414//// Add to List//// Share// Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.////     The test cases are generated so that the answer will fit in a 32-bit integer.////     A subarray is a contiguous subsequence of the array.////////     Example 1://// Input: nums = [2,3,-2,4]// Output: 6// Explanation: [2,3] has the largest product 6.// Example 2://// Input: nums = [-2,0,-1]// Output: 0// Explanation: The result cannot be 2, because [-2,-1] is not a subarray.//////     Constraints://// 1 <= nums.length <= 2 * 104// -10 <= nums[i] <= 10// The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.//     Accepted// 877,566// Submissions// 2,515,887/** * @param {number[]} nums * @return {number} */var maxProduct = function(nums) {    if(nums.length ===0)return 0    let prevMax = nums[0];    let prevMin = nums[0];    let result = nums[0];    for (let i=1;i<nums.length;i++) {        // given the new number, the new maximun can have 3 conditions        // 1. number(+) * prevMax(+) is the largest        // 2. number(+) it self is the largest        // 3. number(-) * prevMin(-) is the largest        let curMax = Math.max(nums[i] * prevMax, nums[i], nums[i] * prevMin);        let curMin = Math.min(nums[i] * prevMin, nums[i], nums[i] * prevMax);        // updating the prevMax & prevMin, these two may swap locations        prevMax = curMax        prevMin = curMin        result = Math.max(curMax, result);    }    return result;};