/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } *//** * @param {TreeNode} root * @return {string[]} */var binaryTreePaths = function(root) {    const result = []    const isNull = (node) => node.left === null & node.right === null    const backtrackinking = (node, temp, result) => {        temp.push(node.val)        if(isNull(node)){            result.push(temp.join("->"))            return        }        if(node.left !== null){            backtrackinking(node.left,temp,result)        }        if(node.right !== null){            backtrackinking(node.right,temp,result)        }        temp.pop()    }    // let result = [];    // dfs(root, "");    //    // function dfs(node, path) {    //     if (!node)    //         return;    //    //     if (!node.left  && !node.right) {    //         result.push(path + node.val);    //         return;    //     }    //     dfs(node.left, path + node.val + "->");    //     dfs(node.right, path + node.val + "->");    // }    // return result;    backtrackinking(root,[],result)    return result};