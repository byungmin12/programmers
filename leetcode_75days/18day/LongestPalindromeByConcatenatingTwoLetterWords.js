// 2131. Longest Palindrome by Concatenating Two Letter Words// Medium//// 645//// 16//// Add to List//// Share// You are given an array of strings words. Each element of words consists of two lowercase English letters.////     Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.////     Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.//// A palindrome is a string that reads the same forward and backward.////////     Example 1://// Input: words = ["lc","cl","gg"]// Output: 6// Explanation: One longest palindrome is "lc" + "gg" + "cl" = "lcggcl", of length 6.// Note that "clgglc" is another longest palindrome that can be created.//     Example 2://// Input: words = ["ab","ty","yt","lc","cl","ab"]// Output: 8// Explanation: One longest palindrome is "ty" + "lc" + "cl" + "yt" = "tylcclyt", of length 8.// Note that "lcyttycl" is another longest palindrome that can be created.//     Example 3://// Input: words = ["cc","ll","xx"]// Output: 2// Explanation: One longest palindrome is "cc", of length 2.// Note that "ll" is another longest palindrome that can be created, and so is "xx".//////     Constraints://// 1 <= words.length <= 105// words[i].length == 2// words[i] consists of lowercase English letters.//     Accepted// 26.2K// Submissions// 63.7K/** * @param {string[]} words * @return {number} */var longestPalindrome = function(words) {    let isDoubleWords = false    let hash = {}    for(let word of words){        if(hash[word] !== undefined){            hash[word] = hash[word] +1        }else{            hash[word] =1        }    }    let result =0    for(let word of words){        let fir = word[1]        let last = word[0]        if(hash[word] && hash[`${fir}${last}`] && hash[word]>0&& hash[`${fir}${last}`] >0){            if(word[0]!==word[1]){                hash[word] = hash[word] -1                hash[`${fir}${last}`] = hash[`${fir}${last}`] -1                result = result +4            }else{                if(hash[word] > 1){                    hash[word] = hash[word] -2                    result = result + 4                }            }        }    }    for(let ha in hash){        if(hash[ha] ===1 && ha[0]===ha[1]){            isDoubleWords= true            break        }    }    return isDoubleWords ? result+2 : result};