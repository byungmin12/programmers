// 74. Search a 2D Matrix// Medium//// 9530//// 302//// Add to List//// Share// Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:////     Integers in each row are sorted from left to right.//     The first integer of each row is greater than the last integer of the previous row.//////     Example 1:////// Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3// Output: true// Example 2:////// Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13// Output: false////// Constraints:////     m == matrix.length// n == matrix[i].length// 1 <= m, n <= 100// -104 <= matrix[i][j], target <= 104// Accepted// 965.9K// Submissions// 2.1M/** * @param {number[][]} matrix * @param {number} target * @return {boolean} */var searchMatrix = function(matrix, target) {    let startArr = []    for(let i =0; i<matrix.length; i++){        if(matrix[i][matrix[i].length-1] >= target){            startArr = [...matrix[i]]            break        }    }    return searchFunction(startArr,target)};var searchFunction = (arr,target) => {    let left = 0    let right = arr.length -1    let isCheckNum = false    while(left <= right){        let center = parseInt((left+right)/2)        if(arr[center]===target){            isCheckNum = true            break        }        if(arr[center]> target){            right = center -1        }else{            left = center +1        }    }    return isCheckNum}