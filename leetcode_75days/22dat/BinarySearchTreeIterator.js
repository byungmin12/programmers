// 173. Binary Search Tree Iterator// Medium//// 6759//// 420//// Add to List//// Share// Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST)://// BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.//     boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.//     int next() Moves the pointer to the right, then returns the number at the pointer.//     Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.////     You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.////////     Example 1:////// Input//     ["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]//     [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]// Output//     [null, 3, 7, true, 9, true, 15, true, 20, false]//// Explanation// BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);// bSTIterator.next();    // return 3// bSTIterator.next();    // return 7// bSTIterator.hasNext(); // return True// bSTIterator.next();    // return 9// bSTIterator.hasNext(); // return True// bSTIterator.next();    // return 15// bSTIterator.hasNext(); // return True// bSTIterator.next();    // return 20// bSTIterator.hasNext(); // return False////// Constraints:////     The number of nodes in the tree is in the range [1, 105].// 0 <= Node.val <= 106// At most 105 calls will be made to hasNext, and next.//////     Follow up:////     Could you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree?//     Accepted//     620,156// Submissions// 902,874/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } *//** * @param {TreeNode} root */var BSTIterator = function(root) {    this.stack = []    // let node = root    // while(node){    //     this.stack.push(node)    //     node = node.left    // }    const bst_in_order = (node) => {        // Leaf node? Return up the call stack        if (!node) {            return null;        }        // Go to the right most node        bst_in_order(node.left);        // Once as far right as we can get        // add to the stack        this.stack.push(node);        // Get the left nodes        bst_in_order(node.right);    };    // Populate our stack    bst_in_order(root);};/** * @return {number} */BSTIterator.prototype.next = function() {    // let node = this.stack.pop()    // const val = node.val    // if(node.right){    //     node = node.right    //     while(node){    //         this.stack.push(node)    //         node = node.left    //     }    // }    //   return val    let node = this.stack.shift()    return node.val;};/** * @return {boolean} */BSTIterator.prototype.hasNext = function() {    return this.stack.length;};/** * Your BSTIterator object will be instantiated and called as such: * var obj = new BSTIterator(root) * var param_1 = obj.next() * var param_2 = obj.hasNext() */