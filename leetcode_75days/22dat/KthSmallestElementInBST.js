// 230. Kth Smallest Element in a BST// Medium//// 8297//// 144//// Add to List//// Share// Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.////////     Example 1:////// Input: root = [3,1,4,null,2], k = 1// Output: 1// Example 2:////// Input: root = [5,3,6,2,4,null,null,1], k = 3// Output: 3////// Constraints:////     The number of nodes in the tree is n.// 1 <= k <= n <= 104// 0 <= Node.val <= 104////// Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?////     Accepted//     927,613// Submissions// 1,344,424/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } *//** * @param {TreeNode} root * @param {number} k * @return {number} */var kthSmallest = function(main, k) {    const search = (root) => {        let left,right        let result = []        if(root.left ){            left = search(root.left)            result = [...left]        }        result = [...result,root.val]        if(root.right){            right= search(root.right)            result = [...result,...right]        }        return result    }    return search(main)[k-1]};