// 200. Number of Islands// Medium//// 15352//// 362//// Add to List//// Share// Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.////     An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.////////     Example 1://// Input: grid = [//     ["1","1","1","1","0"],//     ["1","1","0","1","0"],//     ["1","1","0","0","0"],//     ["0","0","0","0","0"]// ]// Output: 1// Example 2://// Input: grid = [//     ["1","1","0","0","0"],//     ["1","1","0","0","0"],//     ["0","0","1","0","0"],//     ["0","0","0","1","1"]// ]// Output: 3////// Constraints:////     m == grid.length// n == grid[i].length// 1 <= m, n <= 300// grid[i][j] is '0' or '1'.//     Accepted// 1,721,605// Submissions// 3,130,718/** * @param {character[][]} grid * @return {number} */var numIslands = function(grid) {    let cnt = 0    function bfs(x,y){        let queue = [[x,y]]        let dx = [0,0,1,-1]        let dy = [1,-1,0,0]        let pointer = 0        grid[x][y] = "0"        while(queue.length > pointer){            let [xx,yy] =  queue[pointer]            for(let i =0; i<dx.length ; i++){                let nextX = dx[i] + xx                let nextY = dy[i] + yy                if(nextX <0 || nextX >= grid.length || nextY <0 || nextY >= grid[0].length ||  grid[nextX][nextY]==="0" ){                    continue                }else{                    queue.push([nextX,nextY])                }                grid[nextX][nextY] = "0"            }            pointer++        }    }    for(let i=0; i<grid.length; i++){        for(let n=0 ; n< grid[i].length ; n++){            if(grid[i][n]==="1"){                bfs(i,n)                cnt ++            }        }    }    return cnt};