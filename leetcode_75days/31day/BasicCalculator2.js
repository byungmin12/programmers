// 227. Basic Calculator II// Medium//// 5022//// 645//// Add to List//// Share// Given a string s which represents an expression, evaluate this expression and return its value.////     The integer division should truncate toward zero.////     You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].////     Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().////////     Example 1://// Input: s = "3+2*2"// Output: 7// Example 2://// Input: s = " 3/2 "// Output: 1// Example 3://// Input: s = " 3+5 / 2 "// Output: 5////// Constraints:////     1 <= s.length <= 3 * 105// s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.//     s represents a valid expression.//     All the integers in the expression are non-negative integers in the range [0, 231 - 1].//     The answer is guaranteed to fit in a 32-bit integer.//     Accepted// 484,306// Submissions// 1,147,447/** * @param {string} s * @return {number} */const calculate = function(s) {    // current Number    // operation    //stack    //22-3*5    // crrentNum과 currentChar에 들어감    let curNum = ""    let operation = ""    let stack = []    for(let i = 0; i<=s.length; i++){        const cur = s[i]        if(cur === " ")continue        if(!isNaN(cur))curNum = curNum + cur        else{            curNum = Number(curNum)            if(operation ==="" || operation === "+"){                stack.push(curNum)            }            if(operation==="-"){                stack.push(-curNum)            }            if(operation==="*"){                stack.push(stack.pop()*curNum)            }            if(operation==="/"){                stack.push(parseInt(stack.pop()/curNum,10))            }            operation = cur            curNum=""        }    }    return stack.reduce((acc,cur)=>acc+cur)};